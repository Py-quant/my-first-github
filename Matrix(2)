import java.util.*;
import java.io.*;
import java.math.*;
import java.util.stream.*;
import java.nio.file.*;

//Note: Call files through cmd call method - java Matrix Matrix1.txt - or other filename.
//Assignment 5
//CSC 110
//Faaris Kathrada

public class Matrix {
	public static void main (String[] args) {
		//Path filePath = Paths.get("Matrix.txt");
		System.out.println("MATRIX ARITHMETIC");
		System.out.println();
		Path filePath = Paths.get(args[0]);
		System.out.println("Inputting Matrices A, B, D, and Scalar c.....");
		System.out.println();
		Scanner input = null;
		try {
			input = new Scanner(filePath);
		} catch(IOException e) {
			System.out.println("Error reading file: " + e.getMessage());
			return;
		}

		int [][] a = getMatrix(input);
		System.out.println("A = ");
		System.out.println();
		printMatrix(a);
		int [][] b = getMatrix(input);
		System.out.println("B = ");
		System.out.println();
		printMatrix(b);
		int c = input.nextInt();
		input.nextLine();
		System.out.println("c = \n" + c + "\n");
		System.out.println();
		int [][] d = getMatrix(input);
		System.out.println("D = ");
		System.out.println();
		printMatrix(d);
		int [][] aPlusb = add(a,b);
		printMatrix(aPlusb);
		int [][] aMinusb = subtract(a,b);
		printMatrix(aMinusb);
		int [][] scalarC = scalarMultiply(c,a);
		printMatrix(scalarC);
		int [][] aDotd = dot(a,d);
		printMatrix(aDotd);


	}
	public static int[][] getMatrix(Scanner inFile) {
		String line = inFile.nextLine();
		String [] numbers = line.split(" ");
		int i = 0, j = 0;
		int [][] a = new int[numbers.length/2][2];
		for(int k = 0; k < numbers.length; k++) {
			a[i][j++] = Integer.parseInt(numbers[k]);
			if (j > 1) {
				i++;
				j = 0;
			}
		}
		return a;
	}
	public static int [][] add(int[][] one, int[][] theOther) {
		System.out.println("A + B = ");
		System.out.println();
		int m = one.length;
        int n = one[0].length;
        int[][] c = new int[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                c[i][j] = one[i][j] + theOther[i][j];
        return c;
		

	}	
	public static int [][] subtract(int[][] one, int[][] theOther) {
	System.out.println("A - B = \n");
	System.out.println();
	int m = one.length;
    int n = one[0].length;
    int[][] c = new int[m][n];
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            c[i][j] = one[i][j] - theOther[i][j];
    return c;
	}
	public static int [][] scalarMultiply(int scalar, int[][] matrix) {
	System.out.println("cA = \n");
	System.out.println();
	int scalarMatrix [][];
	scalarMatrix = new int [matrix.length][2];

	for (int i=0; i < scalarMatrix.length; i++)
    {
    	for (int j =0; j < scalarMatrix[i].length; j++) {
        	scalarMatrix[i][j] = matrix[i][j] * scalar;
    	}
	} return scalarMatrix;
}	
	public static int [][] dot(int[][] one, int[][] theOther) {
	System.out.println("A dot D = \n");
	System.out.println();
	int m1 = one.length;
    int n1 = one[0].length;
    int m2 = theOther.length;
    int n2 = theOther[0].length;
    int[][] c = new int[m1][n2];
        for (int i = 0; i < m1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = 0; k < n1; k++) {
                    c[i][j] += one[i][k] * theOther[k][j];
                }
            }
        } return c;

	}
	public static void printMatrix(int[][] matrix) {
		for (int k = 0; k < 2; k++) {
				for (int l = 0; l <  matrix.length; l++) {
					System.out.print(matrix[l][k] + " ");
				}
				System.out.println();
			}

				System.out.println();
	}

}
